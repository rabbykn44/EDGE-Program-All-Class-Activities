# -*- coding: utf-8 -*-
"""213902037_Python_Class_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yAg4W8peQco1yTjAbXeyRzZDlZ7jCp-z
"""



plaintext = input("Put a message: ")
key = int(input("Put a key: "))
chiper = ""

for char in plaintext:
    chiper += chr(ord(char) + key)

print("Encrypted message:", chiper)

plaintext = input("Put a message: ")
key = int(input("Put a key: "))
chiper = ""

for char in plaintext:
    chiper += chr(ord(char) + key)

print("Encrypted message:", chiper)

message = ""
for char in chiper:
    message += chr(ord(char) - key)

print("Decrypted message:", message)

plaintext = input("Put a message: ")
key = int(input("Put a key: "))
chiper = ""

for char in plaintext:
    chiper += chr(ord(char) - key)

print("Encrypted message:", chiper)

plaintext = input("Put a message: ")
key = int(input("Put a key: "))
chiper = ""

for char in plaintext:
    chiper += chr(ord(char) + key)

print("Encrypted message:", chiper)

message = ""
for char in chiper:
    message += chr(ord(char) - key)

print("Decrypted message:", message)

student_age = { "Alice": 25, "Bob": 30, "Charlie": 25 }
print(student_age)


for student in student_age:
    print(student)

for age in student_age.values():
    print(age)

for student, age in student_age.items():
    print(student, age)

names =['Alice','Bob','Charlie']
ages = ['25','30','25']

for name,age in zip(names,ages):
    print(name,age)

fruits = ['apple','banana','cherry']
for idex, fruit in enumerate(fruits):
    print(idex,fruit)

for i in range(4):
    for j in range(4):
        for k in range(4):
            print(i, j, k)

A = [3, 41, 12, 9, 7, 4, 15]
max_value = A[0]

for i in A:
    if i > max_value:
        max_value = i

print("Max value:", max_value)

A = [3, 41, 12, 9, 7, 4, 15]
min_value = A[0]

for i in A:
    if i < min_value :
        min_value = i

print("Min value:", min_value)

A = [3, 41, 12, 9, 7, 4, 15]
smallest = None

for i in A:
    if smallest is None:
        smallest = i
    elif i < smallest:
        smallest = i

print("Smallest value:", smallest)

match = True

if match:
    print("Match")

# 1. Print Numbers from 1 to 10
def print_numbers():
    for i in range(1, 11):
        print(i)

if __name__ == "__main__":

    print_numbers()

#2. Sum of First N Natural Numbers
def sum_of_natural_numbers(n):
    return sum(range(1, n + 1))
    n =5
if __name__ == "__main__":
    print(sum_of_natural_numbers(n))

#3. Print Each Character of a String
def print_characters(string):
    print(*string, sep='\n')
if __name__ == "__main__":
    string = "Hello"

    print(" Characters of the string:")
    print_characters(string)

# 1. Print Numbers from 1 to 10
def print_numbers():
    for i in range(1, 11):
        print(i, end=" ")
    print()  # to move to the next line

# 2. Sum of First N Natural Numbers
def sum_of_natural_numbers(n):
    return (n * (n + 1)) // 2  # Using the formula for sum of first N natural numbers

# 3. Print Each Character of a String
def print_characters(string):
    print(*string, sep='\n')  # Using unpacking and separating with new lines

# 4. Print Even Numbers Between 1 and 20
def print_even_numbers():
    print(*[i for i in range(2, 21, 2)], sep=" ")

# 5. Find the Factorial of a Number
def factorial(n):
    return 1 if n == 0 else n * factorial(n - 1)  # Using recursion

# 6. Create a Multiplication Table
def multiplication_table(n):
    for i in range(1, 11):
        print(f"{n} x {i} = {n * i}")

# 7. Sum of Even Numbers in a List
def sum_of_even_numbers(lst):
    return sum(filter(lambda x: x % 2 == 0, lst))  # Using filter and lambda

# 8. Count the Frequency of Digits in a Number
def count_digit_frequency(number):
    from collections import Counter
    return dict(Counter(str(number)))  # Using Counter from collections module

# 9. Check for Prime Numbers in a Range
def prime_numbers_in_range(start, end):
    return [num for num in range(start, end + 1) if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1))]

# 10. Finding Palindromes in a List
def find_palindromes(lst):
    return [word for word in lst if word == word[::-1]]  # Using list comprehension

# Testing the functions
if __name__ == "__main__":
    print("1. Numbers from 1 to 10:")
    print_numbers()

    n = 5
    print(f"\n2. Sum of first {n} natural numbers: {sum_of_natural_numbers(n)}")

    string = "Hello"
    print("\n3. Characters of the string:")
    print_characters(string)

    print("\n4. Even numbers between 1 and 20:")
    print_even_numbers()

    num = 5
    print(f"\n5. Factorial of {num}: {factorial(num)}")

    print("\n6. Multiplication table for 3:")
    multiplication_table(3)

    lst = [1, 2, 3, 4, 5, 6, 7, 8]
    print(f"\n7. Sum of even numbers in the list: {sum_of_even_numbers(lst)}")

    number = 112233
    print(f"\n8. Frequency of digits in {number}: {count_digit_frequency(number)}")

    start, end = 10, 30
    print(f"\n9. Prime numbers between {start} and {end}: {prime_numbers_in_range(start, end)}")

    palindrome_list = ["madam", "hello", "racecar", "world"]
    print(f"\n10. Palindromes in the list: {find_palindromes(palindrome_list)}")

#check for prime Numbers in a Range
import math

n = int (input("put a number: "))
prime =True
for i in range (2, int(math.sqrt(n)), 1):
  if n% i == 0:
    prime = False
    break
if prime:
  print("The Number is prime")
else:
  print("not prime")